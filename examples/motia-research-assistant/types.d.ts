/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    
  }

  interface Handlers {
    'MastraResearchStep': EventHandler<{ researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; searchResults: Array<{ title: string; url: string; content: string; source: string; score: number }>; totalResults: number; timestamp: string }, { topic: 'research.analyzed'; data: { researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; researchAnalysis: { executive_summary: string; confidence_score: number; metadata: { researchId: string; query: string; depth: string; sourcesAnalyzed: number; analysisTimestamp: string; agentModel: string } }; searchResults: Array<unknown>; timestamp: string } }>
    'DataCollectionStep': EventHandler<{ researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; status: string; timestamp: string }, { topic: 'data.collected'; data: { researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; searchResults: Array<{ title: string; url: string; content: string; source: string; score: number }>; totalResults: number; timestamp: string } }>
    'ResearchQueryAPI': ApiRouteHandler<{ query: string; depth: 'basic' | 'detailed' | 'comprehensive' }, unknown, { topic: 'query.received'; data: { researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; status: string; timestamp: string } }>
    'MastraSummaryStep': EventHandler<{ researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; researchAnalysis: { executive_summary: string; confidence_score: number; metadata: { researchId: string; query: string; depth: string; sourcesAnalyzed: number; analysisTimestamp: string; agentModel: string } }; searchResults: Array<unknown>; timestamp: string }, { topic: 'summary.generated'; data: { researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; summaryAnalysis: { executive_summary: string; confidence_assessment: { overall_confidence: number; data_quality: string }; metadata: { researchId: string; query: string; depth: string; targetLength: string; summaryTimestamp: string; agentModel: string; originalConfidence: number } }; summaryStats: { executiveSummaryWords: number; keyTakeawaysCount: number; actionableInsightsCount: number; criticalMetricsCount: number }; researchAnalysis?: unknown; timestamp: string } }>
    'MastraFactCheckStep': EventHandler<{ researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; summaryAnalysis: { executive_summary: string; confidence_assessment: { overall_confidence: number; data_quality: string }; metadata: { researchId: string; query: string; depth: string; targetLength: string; summaryTimestamp: string; agentModel: string; originalConfidence: number } }; summaryStats: { executiveSummaryWords: number; keyTakeawaysCount: number; actionableInsightsCount: number; criticalMetricsCount: number }; researchAnalysis?: unknown; timestamp: string }, { topic: 'factcheck.completed'; data: { researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; factCheckAnalysis: { verification_summary: string; overall_reliability: { score: number; level: string; rationale: string }; metadata: { researchId: string; query: string; depth: string; originalConfidence: number; claimsVerified: number; factCheckTimestamp: string; agentModel: string } }; factCheckStats: { totalClaims: number; verifiedClaims: number; partiallyVerified: number; unverifiedClaims: number; averageConfidence: number }; summaryAnalysis?: unknown; timestamp: string } }>
    'MastraReportWriterStep': EventHandler<{ researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; factCheckAnalysis: { verification_summary: string; overall_reliability: { score: number; level: string; rationale: string }; metadata: { researchId: string; query: string; depth: string; originalConfidence: number; claimsVerified: number; factCheckTimestamp: string; agentModel: string } }; factCheckStats: { totalClaims: number; verifiedClaims: number; partiallyVerified: number; unverifiedClaims: number; averageConfidence: number }; summaryAnalysis?: unknown; timestamp: string }, { topic: 'report.generated'; data: { researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; finalReport: { title: string; subtitle: string; content: string; metadata: { researchId: string; query: string; depth: string; generatedAt: string; agentModel: string; reliabilityScore: number; verifiedClaims: number; totalClaims: number; verificationRate: string; wordCount: number; estimatedReadingTime: string; confidenceLevel: string } }; reportStructure: { title: string; subtitle: string; sections: number; wordCount: number; readingTime: string }; qualityMetrics: { reliabilityScore: number; verificationRate: number; confidenceLevel: string; dataQuality: string; completeness: string }; factCheckAnalysis?: unknown; summaryAnalysis?: unknown; timestamp: string } }>
    'ResultsCoordinatorStep': EventHandler<{ researchId: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; finalReport: { title: string; subtitle: string; content: string; metadata: { researchId: string; query: string; depth: string; generatedAt: string; agentModel: string; reliabilityScore: number; verifiedClaims: number; totalClaims: number; verificationRate: string; wordCount: number; estimatedReadingTime: string; confidenceLevel: string } }; reportStructure: { title: string; subtitle: string; sections: number; wordCount: number; readingTime: string }; qualityMetrics: { reliabilityScore: number; verificationRate: number; confidenceLevel: string; dataQuality: string; completeness: string }; factCheckAnalysis?: unknown; summaryAnalysis?: unknown; timestamp: string }, { topic: 'results.coordinated'; data: { id: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; status: string; createdAt: string; traceId: string; finalReport: { title: string; subtitle: string; content: string; metadata?: unknown }; reportStats: { title: string; subtitle: string; sections: number; wordCount: number; readingTime: string }; researchSummary: { researchId: string; query: string; depth: string; status: string; timing: { startedAt: string; completedAt: string; processingTimeSeconds: number; processingTimeMinutes: number; targetTime: number; metTarget: boolean }; quality: { overallQuality: number; reliabilityScore: number; reliabilityLevel: string; confidenceLevel: string; verifiedClaims: number } }; deliverables: { report: { format: string; title: string; subtitle: string; content: string; metadata?: unknown }; executiveSummary: string; keyInsights: Array<{ insight: string; confidence: number; source: string }>; sourceData?: unknown; metadata?: unknown }; successMetrics: { timeTarget: boolean; qualityTarget: boolean; reliabilityTarget: boolean; completenessTarget: boolean; overallSuccess: boolean }; workflow: { currentStep: string; completedSteps: Array<string>; nextStep: string } } }>
    'ResultStorageStep': EventHandler<{ id: string; query: string; depth: 'basic' | 'detailed' | 'comprehensive'; status: string; createdAt: string; traceId: string; finalReport: { title: string; subtitle: string; content: string; metadata?: unknown }; reportStats: { title: string; subtitle: string; sections: number; wordCount: number; readingTime: string }; researchSummary: { researchId: string; query: string; depth: string; status: string; timing: { startedAt: string; completedAt: string; processingTimeSeconds: number; processingTimeMinutes: number; targetTime: number; metTarget: boolean }; quality: { overallQuality: number; reliabilityScore: number; reliabilityLevel: string; confidenceLevel: string; verifiedClaims: number } }; deliverables: { report: { format: string; title: string; subtitle: string; content: string; metadata?: unknown }; executiveSummary: string; keyInsights: Array<{ insight: string; confidence: number; source: string }>; sourceData?: unknown; metadata?: unknown }; successMetrics: { timeTarget: boolean; qualityTarget: boolean; reliabilityTarget: boolean; completenessTarget: boolean; overallSuccess: boolean }; workflow: { currentStep: string; completedSteps: Array<string>; nextStep: string } }, never>
  }
}