/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    
  }

  interface Handlers {
    'BehavioralTriggerEngine': EventHandler<{ type: string; userId: string; email: string; triggeredAt: string; data?: unknown }, { topic: 'content-personalized'; data: { campaignId: string; scheduledFor?: string; personalizedEmails: unknown[]; totalEmails: number } }>
    'WelcomeEmailSeries': EventHandler<{ userId: string; email: string; firstName?: string; sequenceStep?: number; emailType?: string; template?: string; subject?: string; personalizeContent?: boolean; triggerType?: 'start' | 'progression' | 'timer' }, { topic: 'content-personalized'; data: { campaignId: string; scheduledFor?: string; personalizedEmails: unknown[]; totalEmails: number } }>
    'UnsubscribeHandler': ApiRouteHandler<Record<string, unknown>, ApiResponse<200, { success: boolean; message: string; unsubscribed: boolean; email?: string; confirmationRequired?: boolean; unsubscribeId?: string }> | ApiResponse<400, { success: boolean; error: string }>, never>
    'CampaignStatusMonitor': CronHandler<never>
    'EmailAnalyticsTracker': EventHandler<{ emailId: string; campaignId: string; userId: string; email: string; eventType: 'sent' | 'delivered' | 'opened' | 'clicked' | 'bounced' | 'unsubscribed' | 'complained'; timestamp: string; data?: unknown }, never>
    'EmailScheduler': CronHandler<{ topic: 'content-personalized'; data: { campaignId: string; scheduledFor?: string; personalizedEmails: unknown[]; totalEmails: number } }>
    'EmailDelivery': EventHandler<{ campaignId: string; scheduledFor?: string; personalizedEmails: unknown[]; totalEmails: number }, { topic: 'email-sent'; data: { emailId: string; campaignId: string; userId: string; email: string; eventType: 'sent' | 'delivered' | 'opened' | 'clicked' | 'bounced' | 'unsubscribed' | 'complained'; timestamp: string; data?: unknown } }>
    'UserSegmentation': EventHandler<{ campaignId: string; name: string; subject: string; template: string; targetAudience: 'all' | 'new_users' | 'active_users' | 'vip_users'; scheduledFor?: string; personalizeContent: boolean; createdAt: string }, { topic: 'users-segmented'; data: { campaignId: string; name: string; subject: string; template: string; personalizeContent: boolean; scheduledFor?: string; recipients: unknown[]; totalRecipients: number } }>
    'CreateCampaign': ApiRouteHandler<{ name: string; subject: string; template: string; targetAudience: 'all' | 'new_users' | 'active_users' | 'vip_users'; scheduledFor?: string; personalizeContent?: boolean }, ApiResponse<200, { campaignId: string; name: string; status: 'draft' | 'scheduled' | 'processing'; createdAt: string; targetAudience: string; traceId: string }> | ApiResponse<400, { success: boolean; error: string }>, { topic: 'campaign-created'; data: { campaignId: string; name: string; subject: string; template: string; targetAudience: 'all' | 'new_users' | 'active_users' | 'vip_users'; scheduledFor?: string; personalizeContent: boolean; createdAt: string } }>
    'ContentPersonalization': EventHandler<{ campaignId: string; name: string; subject: string; template: string; personalizeContent: boolean; scheduledFor?: string; recipients: unknown[]; totalRecipients: number }, { topic: 'content-personalized'; data: { campaignId: string; scheduledFor?: string; personalizedEmails: unknown[]; totalEmails: number } }>
  }
}