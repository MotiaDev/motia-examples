/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    
  }

  interface Handlers {
    'CompetitorPriceWebhook': ApiRouteHandler<{ competitorName?: string; products?: Array<{ name: string; price: number; currency?: string; url?: string; lastUpdated?: string }>; rawData?: string; timestamp?: string }, ApiResponse<200, { data: { competitorName?: string; products?: Array<{ name: string; price: number; currency?: string; url?: string; lastUpdated?: string }>; rawData?: string; timestamp?: string }; processedAt: string }>, { topic: 'text-processor'; data: { type: string; payload: { data: { competitorName?: string; products?: Array<{ name: string; price: number; currency: string; url?: string; lastUpdated?: string }>; rawData?: string; timestamp: string }; processedAt: string } } }>
    'VectorStore': EventHandler<{ type: 'EMBEDDINGS_READY' | 'QUERY_VECTOR_STORE'; payload: { embeddings: Array<{ text: string; embedding: Array<number>; metadata: { competitorName?: string; chunkIndex: number; totalChunks: number; sourceType: 'raw' | 'product'; timestamp: string } }>; model: string; totalEmbeddings: number } | { query: string; queryEmbedding: Array<number>; topK?: number } }, { topic: 'rag-agent'; data: { type: string; payload: { documentsStored: number; indexName: string } } } | { topic: 'slack-alert'; data: { type: 'WORKFLOW_ERROR' | 'WARNING'; payload: { step: string; error?: string; message?: string; timestamp: string } } }>
    'TextProcessor': EventHandler<{ type: string; payload: { data: { competitorName?: string; products?: Array<{ name: string; price: number; currency: string; url?: string; lastUpdated?: string }>; rawData?: string; timestamp: string }; processedAt: string } }, { topic: 'embeddings-generator'; data: { type: string; payload: { chunks: Array<{ text: string; metadata: { competitorName?: string; chunkIndex: number; totalChunks: number; sourceType: 'raw' | 'product'; timestamp: string } }>; totalChunks: number } } }>
    'SlackAlert': EventHandler<{ type: 'WORKFLOW_ERROR' | 'WARNING'; payload: { step: string; error?: string; message?: string; timestamp: string } }, never>
    'SheetsLogger': EventHandler<{ type: string; payload: { summary: string; priceComparisons?: Array<{ productName: string; competitorPrice: number; priceDifference?: number; recommendation?: string }>; insights: Array<string>; timestamp: string } }, { topic: 'slack-alert'; data: { type: 'WORKFLOW_ERROR' | 'WARNING'; payload: { step: string; error?: string; message?: string; timestamp: string } } }>
    'RagAgent': EventHandler<{ type: string; payload: { documentsStored: number; indexName: string } }, { topic: 'sheets-logger'; data: { type: string; payload: { summary: string; priceComparisons?: Array<{ productName: string; competitorPrice: number; priceDifference?: number; recommendation?: string }>; insights: Array<string>; timestamp: string } } } | { topic: 'slack-alert'; data: { type: 'WORKFLOW_ERROR' | 'WARNING'; payload: { step: string; error?: string; message?: string; timestamp: string } } }>
    'EmbeddingsGenerator': EventHandler<{ type: string; payload: { chunks: Array<{ text: string; metadata: { competitorName?: string; chunkIndex: number; totalChunks: number; sourceType: 'raw' | 'product'; timestamp: string } }>; totalChunks: number } }, { topic: 'vector-store'; data: { type: 'EMBEDDINGS_READY' | 'QUERY_VECTOR_STORE'; payload: { embeddings: Array<{ text: string; embedding: Array<number>; metadata: { competitorName?: string; chunkIndex: number; totalChunks: number; sourceType: 'raw' | 'product'; timestamp: string } }>; model: string; totalEmbeddings: number } | { query: string; queryEmbedding: Array<number>; topK?: number } } } | { topic: 'slack-alert'; data: { type: 'WORKFLOW_ERROR' | 'WARNING'; payload: { step: string; error?: string; message?: string; timestamp: string } } }>
  }
}