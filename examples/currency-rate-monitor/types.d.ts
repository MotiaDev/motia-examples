/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    
  }

  interface Handlers {
    'WebhookTrigger': ApiRouteHandler<{ text: string; metadata?: Record<string, unknown>; query?: string }, ApiResponse<200, { success: boolean; message: string; traceId: string }> | ApiResponse<400, { error: string }>, { topic: 'text.split'; data: { requestId: string; text: string; metadata?: Record<string, unknown> } } | { topic: 'rag.process'; data: { requestId: string; query: string; metadata?: Record<string, unknown> } }>
    'WeaviateInsert': EventHandler<{ requestId: string; chunk: string; embedding: Array<number>; chunkIndex: number; totalChunks: number; metadata?: Record<string, unknown> }, never>
    'TextSplitter': EventHandler<{ requestId: string; text: string; metadata?: Record<string, unknown> }, { topic: 'embeddings.generate'; data: { requestId: string; chunk: string; chunkIndex: number; totalChunks: number; metadata?: Record<string, unknown> } }>
    'SlackAlert': EventHandler<{ requestId: string; query?: string; error: string; timestamp: string }, never>
    'SheetsAppend': EventHandler<{ requestId: string; query?: string; response?: string; timestamp: string; status: string; metadata?: Record<string, unknown> }, never>
    'RAGAgent': EventHandler<{ requestId: string; query: string; metadata?: Record<string, unknown> }, { topic: 'sheets.append'; data: { requestId: string; query?: string; response?: string; timestamp: string; status: string; metadata?: Record<string, unknown> } } | { topic: 'slack.error'; data: { requestId: string; query?: string; error: string; timestamp: string } }>
    'EmbeddingsGenerator': EventHandler<{ requestId: string; chunk: string; chunkIndex: number; totalChunks: number; metadata?: Record<string, unknown> }, { topic: 'weaviate.insert'; data: { requestId: string; chunk: string; embedding: Array<number>; chunkIndex: number; totalChunks: number; metadata?: Record<string, unknown> } }>
  }
}