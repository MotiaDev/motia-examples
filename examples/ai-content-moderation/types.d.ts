/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    
  }

  interface Handlers {
    'ActionExecutor': EventHandler<{ submissionId: string; decision: 'approved' | 'rejected' | 'escalated'; reviewedBy: string; reviewedAt: string; channel: string; messageTs: string; reason?: string }, never>
    'SlackWebhook': ApiRouteHandler<{ payload?: string }, unknown, { topic: 'content.reviewed'; data: { submissionId: string; decision: 'approved' | 'rejected' | 'escalated'; reviewedBy: string; reviewedAt: string; channel: string; messageTs: string; reason?: string } }>
    'SlackNotifier': EventHandler<{ submissionId: string; decision: string; confidence: number; reason: string; autoDecision: boolean; overallScore: number; timestamp: string }, never>
    'ContentRouter': EventHandler<{ submissionId: string; textAnalysis?: { hasToxicity: boolean; toxicityScore: number; categories: string[]; confidence: number }; imageAnalysis?: { isUnsafe: boolean; safetyScore: number; categories: string[]; confidence: number }; overallScore: number; recommendation: 'approve' | 'review' | 'reject'; timestamp: string; error?: string }, { topic: 'content.needsReview'; data: { submissionId: string; decision: string; confidence: number; reason: string; autoDecision: boolean; overallScore: number; timestamp: string } }>
    'ContentAnalyzer': EventHandler<{ submissionId: string; text?: string; imageUrl?: string; userId: string; platform: string; timestamp: string }, { topic: 'content.analyzed'; data: { submissionId: string; textAnalysis?: { hasToxicity: boolean; toxicityScore: number; categories: string[]; confidence: number }; imageAnalysis?: { isUnsafe: boolean; safetyScore: number; categories: string[]; confidence: number }; overallScore: number; recommendation: 'approve' | 'review' | 'reject'; timestamp: string; error?: string } }>
    'ContentSubmitAPI': ApiRouteHandler<{ text?: string; imageUrl?: string; userId: string; platform: string }, unknown, { topic: 'content.submitted'; data: { submissionId: string; text?: string; imageUrl?: string; userId: string; platform: string; timestamp: string } }>
  }
}